{"pages":[],"posts":[{"title":"Linked List链表","text":"About Linked List 关于链表29st May 2019 Wednesday 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123#include &lt;iostream&gt;using namespace std;typedef struct node { int date; struct node *nexd;}onenode;onenode *crate_node(int n){ onenode *Link = (onenode*)malloc(sizeof(onenode)); //Link = (onenode*)malloc(sizeof(onenode)); if (Link == NULL) { puts(&quot;申请内存失败：&quot;); return NULL; } memset(Link, 0, sizeof(onenode)); Link-&gt;date = n; Link-&gt;nexd=NULL; return Link;}// 尾插void tail_inster(onenode *heat, onenode *thenew){ onenode *t = heat; //一直向后推。直到推到最后一个 while (t-&gt;nexd != NULL) { t = t-&gt;nexd; } t-&gt;nexd = thenew;}//头插void topinster(onenode *header, onenode *nex) { onenode *h = header; nex-&gt;nexd = h-&gt;nexd; h-&gt;nexd = nex;}//历遍void prin(onenode *head) { onenode *h = head; h = h-&gt;nexd; while (NULL != h-&gt;nexd) { cout &lt;&lt;&quot;data：&quot;&lt;&lt; h-&gt;date&lt;&lt;endl; h = h-&gt;nexd; } cout &lt;&lt; h-&gt;date;}int detele_list(onenode *head, int date) { onenode *h = head; onenode *prev = NULL; while (h-&gt;nexd != NULL) { prev = h; //保存当前节点前一个节点的指针； h = h-&gt;nexd; if (h-&gt;date == date) { //两种情况一种是尾结点，另一种不是 if (h-&gt;date != NULL) { prev-&gt;nexd = h-&gt;nexd; free(h); } else { prev-&gt;nexd = NULL; free(h); } return 0; } } puts(&quot;没有要删除的节点&quot;); return -1;}void trave_list(onenode *head) { onenode *h; h = head-&gt;nexd; onenode *pbck; int i = 0; if (h-&gt;nexd == NULL || h == NULL) return; while (h-&gt;nexd != NULL) { pbck = h-&gt;nexd; if (h == head-&gt;nexd) { h-&gt;nexd = NULL; } else { h-&gt;nexd = head-&gt;nexd; } head-&gt;nexd = h; h = pbck; } topinster(head, h); char a;}int main(){ int i; onenode *head = crate_node(0); for (i = 1; i &lt; 5; i++) { //head是地址每次都在变 tail_inster(head, crate_node(i)); } prin(head); detele_list(head, 2); putchar(&apos;\\n&apos;); prin(head); putchar(&apos;\\n&apos;); trave_list(head); putchar(&apos;\\n&apos;); prin(head); return 0;}","link":"/2019/05/29/Data-Structure/"},{"title":"what is this “ElemType”","text":"ElemType(也有的书上称之为elemtp)是数据结构的书上为了说明问题而用的一个词。它是element type（“元素的类型”）的简化体。 因为数据结构是讨论抽象的数据存储和算法的，一种结构中元素的类型不一定是整型、字符型、浮点型或者用户自定义类型，为了不重复说明，使用过程中用“elemtype”代表所有可能的数据类型，简单明了的概括了整体。在算法中，除特别说明外，规定ElemType的默认是int型。","link":"/2019/05/30/pat-plans/"},{"title":"马超然","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/05/17/hello-world/"},{"title":"如何把本地文件推到github","text":"如何把本地文件推到githubHow to push my files to github不间断更新 找到新加文件的位置 找到本地库库处git add . git commit -m &quot;提交信息&quot; （注：“提交信息”里面换成你需要，如“first commit”） git push -u origin master （注：此操作目的是把本地仓库push到github上面","link":"/2019/05/29/skill/"},{"title":"test","text":"所有测试在此进行All tests will be done here :&gt; 参考文献12codes test#include 分割线dividers 列表 1 2 1 2 连接test 11 11 11 111","link":"/2019/05/17/test/"}],"tags":[{"name":"链表/Link List","slug":"链表-Link-List","link":"/tags/链表-Link-List/"},{"name":"ElemType","slug":"ElemType","link":"/tags/ElemType/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"test","slug":"test","link":"/tags/test/"}],"categories":[{"name":"Data structure","slug":"Data-structure","link":"/categories/Data-structure/"},{"name":"WHAT","slug":"WHAT","link":"/categories/WHAT/"},{"name":"HOW","slug":"HOW","link":"/categories/HOW/"},{"name":"线性","slug":"Data-structure/线性","link":"/categories/Data-structure/线性/"},{"name":"test1","slug":"test1","link":"/categories/test1/"}]}